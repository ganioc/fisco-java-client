package com.ruff.hello.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TstPayV7 extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","15612c0a57600080fd5b505af1158015612c1e573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff166331afac366003846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612d295780601f10612cfe57610100808354040283529160200191612d29565b820191906000526020600020905b815481529060010190602001808311612d0c57829003601f168201915b50509350505050602060405180830381600087803b158015612d4a57600080fd5b505af1158015612d5e573d6000803e3d6000fd5b505050506040513d6020811015612d7457600080fd5b81019080805190602001909291905050501415612f15577f01680bab0f94ad7850aa56cbc6050ef9d5e065be4eeb6cfc29c6761931752e0f60006004811115612db957fe5b338d8d8d8d8d8d8d8d604051808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018981526020018881526020018781526020018060200186815260200185815260200184815260200183810383528b818151815260200191508051906020019080838360005b83811015612e62578082015181840152602081019050612e47565b50505050905090810190601f168015612e8f5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b83811015612ec8578082015181840152602081019050612ead565b50505050905090810190601f168015612ef55780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a160009250612f1a565b600192505b505098975050505050505050565b6000612f3261305a565b73ffffffffffffffffffffffffffffffffffffffff1663f23f63c9836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fb9578082015181840152602081019050612f9e565b50505050905090810190601f168015612fe65780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561300557600080fd5b505af1158015613019573d6000803e3d6000fd5b505050506040513d602081101561302f57600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a72305820bd8de07e4c875418eee57d29b27782d0e77ab759be5d7c3947902b7735aee7eb0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","90602001808311611bf857829003601f168201915b5050505050905090565b6000806000611c2d85612f28565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611c9357600080fd5b505af1158015611ca7573d6000803e3d6000fd5b505050506040513d6020811015611cbd57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663d62b54b4856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015611d7857600080fd5b505af1158015611d8c573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663d8ac595786836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611e4b578082015181840152602081019050611e30565b50505050905090810190601f168015611e785780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611e9857600080fd5b505af1158015611eac573d6000803e3d6000fd5b505050506040513d6020811015611ec257600080fd5b81019080805190602001909291905050509250505092915050565b6000806000611eeb85612f28565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611f5157600080fd5b505af1158015611f65573d6000803e3d6000fd5b505050506040513d6020811015611f7b57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663ae763db5856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561204e578082015181840152602081019050612033565b50505050905090810190601f16801561207b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561209b57600080fd5b505af11580156120af573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663d8ac595786836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561216e578082015181840152602081019050612153565b50505050905090810190601f16801561219b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156121bb57600080fd5b505af11580156121cf573d6000803e3d6000fd5b505050506040513d60208110156121e557600080fd5b81019080805190602001909291905050509250505092915050565b60008060006122a860038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561229e5780601f106122735761010080835404028352916020019161229e565b820191906000526020600020905b81548152906001019060200180831161228157829003601f168201915b5050505050612f28565b91508173ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561230e57600080fd5b505af1158015612322573d6000803e3d6000fd5b505050506040513d602081101561233857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16631a391cb460036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f7461626c655f69640000000000000000000000000000000000000000000000008152506020018381038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156124555780601f1061242a57610100808354040283529160200191612455565b820191906000526020600020905b81548152906001019060200180831161243857829003601f168201915b50509350505050600060405180830381600087803b15801561247657600080fd5b505af115801561248a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb48c6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f62657274685f6964000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561254e578082015181840152602081019050612533565b50505050905090810190601f16801561257b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561259b57600080fd5b505af11580156125af573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2f4ee6d6000546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260058152602001807f696e64657800000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561265d57600080fd5b505af1158015612671573d6000803e3d6000fd5b5050505061267d613047565b8073ffffffffffffffffffffffffffffffffffffffff1663def426988b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260068152602001807f616d6f756e74000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561272557600080fd5b505af1158015612739573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def426988a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260048152602001807f6d6f64650000000000000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580156127e557600080fd5b505af11580156127f9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260188152602001807f7061726b696e675f61637475616c5f7061795f6d6f6e6579000000000000000081525060200192505050600060405180830381600087803b1580156128a557600080fd5b505af11580156128b9573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260118152602001807f7061726b696e675f7265636f72645f6964000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561297d578082015181840152602081019050612962565b50505050905090810190601f1680156129aa5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156129ca57600080fd5b505af11580156129de573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018381526020018281038252600a8152602001807f7072657061795f6c656e0000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b158015612a8a57600080fd5b505af1158015612a9e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260118152602001807f73686f756c645f7061795f616d6f756e7400000000000000000000000000000081525060200192505050600060405180830381600087803b158015612b4a57600080fd5b505af1158015612b5e573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663def42698856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260088152602001807f7a65726f5f6f776500000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b1580","15612c0a57600080fd5b505af1158015612c1e573d6000803e3d6000fd5b5050505060018273ffffffffffffffffffffffffffffffffffffffff16634c6f30c06003846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015612d295780601f10612cfe57610100808354040283529160200191612d29565b820191906000526020600020905b815481529060010190602001808311612d0c57829003601f168201915b50509350505050602060405180830381600087803b158015612d4a57600080fd5b505af1158015612d5e573d6000803e3d6000fd5b505050506040513d6020811015612d7457600080fd5b81019080805190602001909291905050501415612f15577f6e2c87317ee6ded0939a21f5e5393a327e39df5f55ee543ea8228029214a07bb60006004811115612db957fe5b338d8d8d8d8d8d8d8d604051808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018981526020018881526020018781526020018060200186815260200185815260200184815260200183810383528b818151815260200191508051906020019080838360005b83811015612e62578082015181840152602081019050612e47565b50505050905090810190601f168015612e8f5780820380516001836020036101000a031916815260200191505b50838103825287818151815260200191508051906020019080838360005b83811015612ec8578082015181840152602081019050612ead565b50505050905090810190601f168015612ef55780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390a160009250612f1a565b600192505b505098975050505050505050565b6000612f3261305a565b73ffffffffffffffffffffffffffffffffffffffff166359a48b65836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fb9578082015181840152602081019050612f9e565b50505050905090810190601f168015612fe65780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561300557600080fd5b505af1158015613019573d6000803e3d6000fd5b505050506040513d602081101561302f57600080fd5b81019080805190602001909291905050509050919050565b6000808154809291906001019190505550565b60006110019050905600a165627a7a7230582021b80db81e96a391bdcf4c94c5ffb7438bb5ab31825d86b4b65f13a5dd47fe990029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"mIndex\",\"type\":\"uint256\"}],\"name\":\"getByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLoc\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"mode\",\"type\":\"int256\"},{\"name\":\"parkingActualPayMoney\",\"type\":\"int256\"},{\"name\":\"parkingRecordId\",\"type\":\"string\"},{\"name\":\"prepayLen\",\"type\":\"int256\"},{\"name\":\"shouldPayAmount\",\"type\":\"int256\"},{\"name\":\"zeroOwe\",\"type\":\"int256\"}],\"name\":\"insertRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"berthId\",\"type\":\"string\"}],\"name\":\"getById\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"loc\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"berthId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"mode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"parkingActualPayMoney\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"parkingRecordId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"prepayLen\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"shouldPayAmount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"zeroOwe\",\"type\":\"int256\"}],\"name\":\"InsertPayRecordEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETBYINDEX = "getByIndex";

    public static final String FUNC_GETINDEX = "getIndex";

    public static final String FUNC_GETLOC = "getLoc";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_INSERTRECORD = "insertRecord";

    public static final String FUNC_GETBYID = "getById";

    public static final Event INSERTPAYRECORDEVENT_EVENT = new Event("InsertPayRecordEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    protected TstPayV7(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt getByIndex(BigInteger mIndex) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new Uint256(mIndex)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getByIndex(BigInteger mIndex, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new Uint256(mIndex)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetByIndex(BigInteger mIndex) {
        final Function function = new Function(
                FUNC_GETBYINDEX, 
                Arrays.<Type>asList(new Uint256(mIndex)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetByIndexInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getGetByIndexOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public BigInteger getIndex() throws ContractException {
        final Function function = new Function(FUNC_GETINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getLoc() throws ContractException {
        final Function function = new Function(FUNC_GETLOC, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt insertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new Utf8String(berthId),
                new Int256(amount),
                new Int256(mode),
                new Int256(parkingActualPayMoney),
                new Utf8String(parkingRecordId),
                new Int256(prepayLen),
                new Int256(shouldPayAmount),
                new Int256(zeroOwe)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new Utf8String(berthId),
                new Int256(amount),
                new Int256(mode),
                new Int256(parkingActualPayMoney),
                new Utf8String(parkingRecordId),
                new Int256(prepayLen),
                new Int256(shouldPayAmount),
                new Int256(zeroOwe)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertRecord(String berthId, BigInteger amount, BigInteger mode, BigInteger parkingActualPayMoney, String parkingRecordId, BigInteger prepayLen, BigInteger shouldPayAmount, BigInteger zeroOwe) {
        final Function function = new Function(
                FUNC_INSERTRECORD, 
                Arrays.<Type>asList(new Utf8String(berthId),
                new Int256(amount),
                new Int256(mode),
                new Int256(parkingActualPayMoney),
                new Utf8String(parkingRecordId),
                new Int256(prepayLen),
                new Int256(shouldPayAmount),
                new Int256(zeroOwe)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getInsertRecordInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertRecordOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new Utf8String(berthId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getById(String berthId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new Utf8String(berthId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetById(String berthId) {
        final Function function = new Function(
                FUNC_GETBYID, 
                Arrays.<Type>asList(new Utf8String(berthId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getGetByIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getGetByIdOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETBYID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue()
                );
    }

    public List<InsertPayRecordEventEventResponse> getInsertPayRecordEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTPAYRECORDEVENT_EVENT, transactionReceipt);
        ArrayList<InsertPayRecordEventEventResponse> responses = new ArrayList<InsertPayRecordEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertPayRecordEventEventResponse typedResponse = new InsertPayRecordEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.berthId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.mode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.parkingActualPayMoney = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.parkingRecordId = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.prepayLen = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.shouldPayAmount = (BigInteger) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.zeroOwe = (BigInteger) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertPayRecordEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTPAYRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertPayRecordEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTPAYRECORDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static TstPayV7 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new TstPayV7(contractAddress, client, credential);
    }

    public static TstPayV7 deploy(Client client, CryptoKeyPair credential, String loc) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(loc)));
        return deploy(TstPayV7.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class InsertPayRecordEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String account;

        public String berthId;

        public BigInteger amount;

        public BigInteger mode;

        public BigInteger parkingActualPayMoney;

        public String parkingRecordId;

        public BigInteger prepayLen;

        public BigInteger shouldPayAmount;

        public BigInteger zeroOwe;
    }
}
