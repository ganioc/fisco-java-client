package com.ruff.hello.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class StoreKey extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","6f207075626b6579207365740000000000000000000000000000000000000081525060200191505060405180910390fd5b6101008351101515613042576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f686173684964206c656e677468206f766572206c696d6974000000000000000081525060200191505060405180910390fd5b61304b83613b1d565b905060a06040519081016040528084815260200160006040519080825280601f01601f1916602001820160405280156130935781602001602082028038833980820191505090505b50815260200160006040519080825280601f01601f1916602001820160405280156130cd5781602001602082028038833980820191505090505b5081526020016064815260200160011515815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190613179929190613c29565b506020820151816001019080519060200190613196929190613c29565b5060408201518160020190805190602001906131b3929190613c29565b506060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050507f99ebb262e1e3cef26e2f0bd134061262ce0849b7f9725e0411efa5232f6dfbf7338285604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156132a957808201518184015260208101905061328e565b50505050905090810190601f1680156132d65780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000915050919050565b606080606060008061330086613b1d565b905060011515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff16151514151561340a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5265717565737420756e617661696c61626c650000000000000000000000000081525060200191505060405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561369c5780601f106136715761010080835404028352916020019161369c565b820191906000526020600020905b81548152906001019060200180831161367f57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137385780601f1061370d57610100808354040283529160200191613738565b820191906000526020600020905b81548152906001019060200180831161371b57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137d45780601f106137a9576101008083540402835291602001916137d4565b820191906000526020600020905b8154815290600101906020018083116137b757829003601f168201915b505050505091509450945094509450509193509193565b600560205281600052604060002060205280600052604060002060009150915050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156138a45780601f10613879576101008083540402835291602001916138a4565b820191906000526020600020905b81548152906001019060200180831161388757829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139425780601f1061391757610100808354040283529160200191613942565b820191906000526020600020905b81548152906001019060200180831161392557829003601f168201915b505050505090806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139e05780601f106139b5576101008083540402835291602001916139e0565b820191906000526020600020905b8154815290600101906020018083116139c357829003601f168201915b5050505050908060030154908060040160009054906101000a900460ff16905085565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613ab1575060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b1515613abc57600080fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060009050919050565b6000816040518082805190602001908083835b602083101515613b555780518252602082019150602081019050602083039250613b30565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613bce57805160ff1916838001178555613bfc565b82800160010185558215613bfc579182015b82811115613bfb578251825591602001919060010190613be0565b5b509050613c099190613cf1565b5090565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613c6a57805160ff1916838001178555613c98565b82800160010185558215613c98579182015b82811115613c97578251825591602001919060010190613c7c565b5b509050613ca59190613cf1565b5090565b50805460018160011615610100020316600290046000825580601f10613ccf5750613cee565b601f016020900490600052602060002090810190613ced9190613cf1565b5b50565b613d1391905b80821115613d0f576000816000905550600101613cf7565b5090565b905600a165627a7a723058201948104711d219a523b5692830648473fb5caa83cdd312f0dce26a61c073331b0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","ffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018190555060006040519080825280601f01601f1916602001820160405280156130085781602001602082028038833980820191505090505b50600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061309b929190613c29565b5060006040519080825280601f01601f1916602001820160405280156130d05781602001602082028038833980820191505090505b50600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190613163929190613c29565b507f6744dca4e7a6d0dc651ecd4d97a63e61f03be2e41bf406611fbe72fcaf2e572885828686604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015613233578082015181840152602081019050613218565b50505050905090810190601f1680156132605780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a160009150509392505050565b60008061328885613b1d565b905060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514806133365750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156133aa576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4e6f2061646d696e20726967687473000000000000000000000000000000000081525060200191505060405180910390fd5b60011515600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615151415156134b2576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5265717565737420756e617661696c61626c650000000000000000000000000081525060200191505060405180910390fd5b84600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000019080519060200190613545929190613c29565b5083600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906135d9929190613c29565b5082600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201908051906020019061366d929190613c29565b506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055507fecc6d35b0f6b06da3605e4e4ea1110eeab3bd7c8b41b39612bf42704a629c0ba8682878787604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156137c55780820151818401526020810190506137aa565b50505050905090810190601f1680156137f25780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561382b578082015181840152602081019050613810565b50505050905090810190601f1680156138585780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015613891578082015181840152602081019050613876565b50505050905090810190601f1680156138be5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a16000915050949350505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061398c575060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b151561399757600080fd5b60011515600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515613a5f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f742065786973742e0000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000613afe9190613ca9565b6001820160006101000a81549060ff0219169055505060009050919050565b6000816040518082805190602001908083835b602083101515613b555780518252602082019150602081019050602083039250613b30565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049050919050565b6040805190810160405280606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613bea57805160ff1916838001178555613c18565b82800160010185558215613c18579182015b82811115613c17578251825591602001919060010190613bfc565b5b509050613c259190613cf1565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613c6a57805160ff1916838001178555613c98565b82800160010185558215613c98579182015b82811115613c97578251825591602001919060010190613c7c565b5b509050613ca59190613cf1565b5090565b50805460018160011615610100020316600290046000825580601f10613ccf5750613cee565b601f016020900490600052602060002090810190613ced9190613cf1565b5b50565b613d1391905b80821115613d0f576000816000905550600101613cf7565b5090565b905600a165627a7a723058208518b46e647b25fccb943e7ef6f6a6a33ee0d2f7f953355aee6f218a60200bd50029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"hashId\",\"type\":\"bytes\"},{\"name\":\"newHashId\",\"type\":\"bytes\"},{\"name\":\"encryptedSecret\",\"type\":\"bytes\"}],\"name\":\"updateRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"ownerSetPubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"setPubkey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"hashId\",\"type\":\"bytes\"}],\"name\":\"queryRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"hashId\",\"type\":\"bytes\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"refuseRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"pubkey2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pubkeys\",\"outputs\":[{\"name\":\"pubkey\",\"type\":\"bytes\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hashId\",\"type\":\"bytes\"}],\"name\":\"setRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hashId\",\"type\":\"bytes\"}],\"name\":\"getRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"requests\",\"outputs\":[{\"name\":\"hashId\",\"type\":\"bytes\"},{\"name\":\"newHashId\",\"type\":\"bytes\"},{\"name\":\"encryptedSecret\",\"type\":\"bytes\"},{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hashId\",\"type\":\"bytes\"}],\"name\":\"EventSetRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hashId\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"EventRefuseRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hashId\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"newHashId\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"secret\",\"type\":\"bytes\"}],\"name\":\"EventUpdateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"EventSetPubkey\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETPUBKEY = "getPubkey";

    public static final String FUNC_UPDATEREQUEST = "updateRequest";

    public static final String FUNC_REMOVEADMIN = "removeAdmin";

    public static final String FUNC_OWNERSETPUBKEY = "ownerSetPubkey";

    public static final String FUNC_SETPUBKEY = "setPubkey";

    public static final String FUNC_REMOVEWHITELIST = "removeWhiteList";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ADMINS = "admins";

    public static final String FUNC_QUERYREQUEST = "queryRequest";

    public static final String FUNC_REFUSEREQUEST = "refuseRequest";

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_GETINDEX = "getIndex";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_PUBKEY2ADDRESS = "pubkey2Address";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_PUBKEYS = "pubkeys";

    public static final String FUNC_SETREQUEST = "setRequest";

    public static final String FUNC_GETREQUEST = "getRequest";

    public static final String FUNC_REQUESTS = "requests";

    public static final String FUNC_ADDWHITELIST = "addWhiteList";

    public static final Event EVENTSETREQUEST_EVENT = new Event("EventSetRequest",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EVENTREFUSEREQUEST_EVENT = new Event("EventRefuseRequest",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EVENTUPDATEREQUEST_EVENT = new Event("EventUpdateRequest",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event EVENTSETPUBKEY_EVENT = new Event("EventSetPubkey",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    protected StoreKey(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public byte[] getPubkey(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt updateRequest(String addr, byte[] hashId, byte[] newHashId, byte[] encryptedSecret) {
        final Function function = new Function(
                FUNC_UPDATEREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(newHashId),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(encryptedSecret)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateRequest(String addr, byte[] hashId, byte[] newHashId, byte[] encryptedSecret, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(newHashId),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(encryptedSecret)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateRequest(String addr, byte[] hashId, byte[] newHashId, byte[] encryptedSecret) {
        final Function function = new Function(
                FUNC_UPDATEREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(newHashId),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(encryptedSecret)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, byte[], byte[], byte[]> getUpdateRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEREQUEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, byte[], byte[], byte[]>(

                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (byte[]) results.get(3).getValue()
        );
    }

    public Tuple1<BigInteger> getUpdateRequestOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEREQUEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt removeAdmin(String addr) {
        final Function function = new Function(
                FUNC_REMOVEADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeAdmin(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveAdmin(String addr) {
        final Function function = new Function(
                FUNC_REMOVEADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getRemoveAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt ownerSetPubkey(String addr, byte[] pubkey) {
        final Function function = new Function(
                FUNC_OWNERSETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void ownerSetPubkey(String addr, byte[] pubkey, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_OWNERSETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForOwnerSetPubkey(String addr, byte[] pubkey) {
        final Function function = new Function(
                FUNC_OWNERSETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, byte[]> getOwnerSetPubkeyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_OWNERSETPUBKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(

                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue()
        );
    }

    public Tuple1<BigInteger> getOwnerSetPubkeyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_OWNERSETPUBKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt setPubkey(byte[] pubkey) {
        final Function function = new Function(
                FUNC_SETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setPubkey(byte[] pubkey, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetPubkey(byte[] pubkey) {
        final Function function = new Function(
                FUNC_SETPUBKEY,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetPubkeyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPUBKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getSetPubkeyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETPUBKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt removeWhiteList(String addr) {
        final Function function = new Function(
                FUNC_REMOVEWHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeWhiteList(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEWHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveWhiteList(String addr) {
        final Function function = new Function(
                FUNC_REMOVEWHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveWhiteListInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEWHITELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getRemoveWhiteListOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEWHITELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Boolean isAdmin(String addr) throws ContractException {
        final Function function = new Function(FUNC_ISADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean admins(String param0) throws ContractException {
        final Function function = new Function(FUNC_ADMINS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Tuple4<byte[], byte[], byte[], BigInteger> queryRequest(String addr, byte[] hashId) throws ContractException {
        final Function function = new Function(FUNC_QUERYREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<byte[], byte[], byte[], BigInteger>(
                (byte[]) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public TransactionReceipt refuseRequest(String addr, byte[] hashId, BigInteger status) {
        final Function function = new Function(
                FUNC_REFUSEREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void refuseRequest(String addr, byte[] hashId, BigInteger status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFUSEREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefuseRequest(String addr, byte[] hashId, BigInteger status) {
        final Function function = new Function(
                FUNC_REFUSEREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr),
                        new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId),
                        new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(status)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], BigInteger> getRefuseRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REFUSEREQUEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], BigInteger>(

                (String) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public Tuple1<BigInteger> getRefuseRequestOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REFUSEREQUEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt addAdmin(String addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addAdmin(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAdmin(String addr) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getAddAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDADMIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public BigInteger getIndex() throws ContractException {
        final Function function = new Function(FUNC_GETINDEX,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String pubkey2Address(byte[] pubkey) throws ContractException {
        final Function function = new Function(FUNC_PUBKEY2ADDRESS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(pubkey)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean whitelist(String param0) throws ContractException {
        final Function function = new Function(FUNC_WHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Tuple2<byte[], Boolean> pubkeys(String param0) throws ContractException {
        final Function function = new Function(FUNC_PUBKEYS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<byte[], Boolean>(
                (byte[]) results.get(0).getValue(),
                (Boolean) results.get(1).getValue());
    }

    public TransactionReceipt setRequest(byte[] hashId) {
        final Function function = new Function(
                FUNC_SETREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setRequest(byte[] hashId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRequest(byte[] hashId) {
        final Function function = new Function(
                FUNC_SETREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetRequestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETREQUEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getSetRequestOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETREQUEST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple4<byte[], byte[], byte[], BigInteger> getRequest(byte[] hashId) throws ContractException {
        final Function function = new Function(FUNC_GETREQUEST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(hashId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<byte[], byte[], byte[], BigInteger>(
                (byte[]) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public Tuple5<byte[], byte[], byte[], BigInteger, Boolean> requests(String param0, String param1) throws ContractException {
        final Function function = new Function(FUNC_REQUESTS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(param0),
                        new org.fisco.bcos.sdk.abi.datatypes.Address(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<byte[], byte[], byte[], BigInteger, Boolean>(
                (byte[]) results.get(0).getValue(),
                (byte[]) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (Boolean) results.get(4).getValue());
    }

    public TransactionReceipt addWhiteList(String addr) {
        final Function function = new Function(
                FUNC_ADDWHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addWhiteList(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDWHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddWhiteList(String addr) {
        final Function function = new Function(
                FUNC_ADDWHITELIST,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddWhiteListInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDWHITELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<BigInteger> getAddWhiteListOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDWHITELIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public List<EventSetRequestEventResponse> getEventSetRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTSETREQUEST_EVENT, transactionReceipt);
        ArrayList<EventSetRequestEventResponse> responses = new ArrayList<EventSetRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventSetRequestEventResponse typedResponse = new EventSetRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hashId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEventSetRequestEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTSETREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEventSetRequestEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTSETREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<EventRefuseRequestEventResponse> getEventRefuseRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTREFUSEREQUEST_EVENT, transactionReceipt);
        ArrayList<EventRefuseRequestEventResponse> responses = new ArrayList<EventRefuseRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventRefuseRequestEventResponse typedResponse = new EventRefuseRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hashId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEventRefuseRequestEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTREFUSEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEventRefuseRequestEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTREFUSEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<EventUpdateRequestEventResponse> getEventUpdateRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTUPDATEREQUEST_EVENT, transactionReceipt);
        ArrayList<EventUpdateRequestEventResponse> responses = new ArrayList<EventUpdateRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventUpdateRequestEventResponse typedResponse = new EventUpdateRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.hashId = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.newHashId = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.secret = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEventUpdateRequestEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTUPDATEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEventUpdateRequestEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTUPDATEREQUEST_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<EventSetPubkeyEventResponse> getEventSetPubkeyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTSETPUBKEY_EVENT, transactionReceipt);
        ArrayList<EventSetPubkeyEventResponse> responses = new ArrayList<EventSetPubkeyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventSetPubkeyEventResponse typedResponse = new EventSetPubkeyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pubkey = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeEventSetPubkeyEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTSETPUBKEY_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeEventSetPubkeyEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(EVENTSETPUBKEY_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static StoreKey load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new StoreKey(contractAddress, client, credential);
    }

    public static StoreKey deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(StoreKey.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class EventSetRequestEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public String id;

        public byte[] hashId;
    }

    public static class EventRefuseRequestEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public String id;

        public byte[] hashId;

        public BigInteger status;
    }

    public static class EventUpdateRequestEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public String id;

        public byte[] hashId;

        public byte[] newHashId;

        public byte[] secret;
    }

    public static class EventSetPubkeyEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public byte[] pubkey;
    }
}
