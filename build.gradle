plugins {
    id 'java'
    id 'application'

}
application {
    mainClassName = 'com.ruff.hello.client'
}
group 'org.example'
version '1.6.1-SNAPSHOT'

java{
    toolchain{
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

repositories {

    // solidity 编译器maven库
//    maven { url "https://dl.bintray.com/ethereum/maven/" }

    // ipfs repository
    maven { url 'https://jitpack.io' }

    // JavaSDK snapshot 版本 maven库
    maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
    // JavaSDK maven 库
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/"}

    mavenCentral()
}
def spring_version = "4.3.27.RELEASE"
List spring = [
        "org.springframework:spring-core:$spring_version",
        "org.springframework:spring-beans:$spring_version",
        "org.springframework:spring-context:$spring_version",
        "org.springframework:spring-tx:$spring_version",
]
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    // 日志依赖
    //    compile ('org.slf4j:slf4j-log4j12:1.7.25')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // JavaSDK依赖, 2.1.0版本
    // compile ('org.fisco-bcos:web3sdk:2.1.0')
    compile ('org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:2.7.1')
    compile spring
    compile ('org.slf4j:slf4j-log4j12:1.7.25')
    runtime ('org.slf4j:slf4j-log4j12:1.7.25')

    // compile ('com.github.celeduc:java-ipfs-api:v1.0.0-PRE')
    compile ('com.github.ipfs:java-ipfs-http-client:v1.3.3')

//    implementation ('com.github.ipfs:java-ipfs-http-client:v1.3.3')

}
jar {
    destinationDir file('dist/apps')
    archiveName project.name + project.version + '.jar'
//
//    sourceCompatibility = 1.11

    manifest {
        attributes "Main-Class": "com.ruff.hello.client"
    }
//    from {
//        configurations.compile.collect {
//            it.isDirectory() ? it : zipTree(it)
//        }
//    }

    doLast {
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('src/test/resources/')
            into 'dist/conf'
        }

    }
}
test {
    useJUnitPlatform()
}